import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import json

st.set_page_config(
    page_title="Simple Pareto Explorer",
    page_icon="ðŸ“Š",
    layout="wide"
)

st.title("ðŸ“Š Simple Pareto Front Explorer")
st.write("Upload your JSON state file to visualize elite solutions across generations")

# File upload
uploaded_file = st.file_uploader(
    "Upload JSON state file",
    type="json",
    help="Upload a JSON file generated by RedBlueStateSaver"
)

if uploaded_file is not None:
    try:
        # Load JSON data
        data = json.load(uploaded_file)
        
        if 'generations' in data:
            generations = data['generations']
            st.success(f"âœ… Loaded {len(generations)} generations")
            
            # Extract all elites
            all_elites = []
            for gen_data in generations:
                generation = gen_data['generation']
                individuals = gen_data.get('individuals', [])
                
                for individual in individuals:
                    if individual.get('is_elite', False):
                        objectives = individual.get('objectives', [0, 0])
                        
                        # Convert special values
                        def convert_values(obj_list):
                            converted = []
                            for val in obj_list:
                                if val == "Infinity":
                                    converted.append(float('inf'))
                                elif val == "-Infinity":
                                    converted.append(float('-inf'))
                                elif val == "NaN":
                                    converted.append(float('nan'))
                                else:
                                    converted.append(float(val))
                            return converted
                        
                        objectives = convert_values(objectives)
                        
                        # Skip infinite/NaN values for plotting
                        if not (np.any(np.isinf(objectives)) or np.any(np.isnan(objectives))):
                            all_elites.append({
                                'generation': generation,
                                'obj1': objectives[0],
                                'obj2': objectives[1] if len(objectives) > 1 else 0,
                                'prompt': individual.get('prompt', 'No prompt')[:100] + "..." if len(str(individual.get('prompt', ''))) > 100 else str(individual.get('prompt', 'No prompt'))
                            })
            
            if all_elites:
                df = pd.DataFrame(all_elites)
                
                # Create plot
                fig = px.scatter(
                    df,
                    x='obj1',
                    y='obj2',
                    color='generation',
                    hover_data=['prompt'],
                    title="Pareto Front Evolution - Elite Solutions",
                    labels={'obj1': 'Objective 1', 'obj2': 'Objective 2', 'generation': 'Generation'}
                )
                
                fig.update_traces(marker=dict(size=10, opacity=0.7))
                fig.update_layout(height=600)
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Show data table
                with st.expander("ðŸ“‹ Elite Solutions Data"):
                    st.dataframe(df)
                
                st.success(f"ðŸŽ¯ Plotted {len(all_elites)} elite solutions from {len(set(df['generation']))} generations")
            else:
                st.warning("No valid elite solutions found for plotting")
        else:
            st.error("Invalid JSON format: missing 'generations' key")
            
    except Exception as e:
        st.error(f"Error loading JSON: {str(e)}")
        
else:
    st.info("ðŸ‘† Please upload a JSON state file to begin visualization")
    
    # Show example of expected format
    with st.expander("ðŸ“– Expected JSON Format"):
        st.code("""
{
  "metadata": { ... },
  "generations": [
    {
      "generation": 0,
      "individuals": [
        {
          "is_elite": true,
          "objectives": [0.1, 0.2],
          "prompt": "Your optimized prompt text here..."
        }
      ]
    }
  ]
}
        """, language="json") 